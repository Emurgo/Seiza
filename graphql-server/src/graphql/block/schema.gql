type Block @cost(complexity: 10) {
  # Not set in case when Slot is empty
  blockHash: String
  epoch: Int!
  slot: Int!
  # TODO: bad naming, should be issuedAt
  timeIssued: Timestamp!
  transactionsCount: Int!
  # TODO: use pageSize for cost
  transactions:[Transaction!] @cost(multipliers: [10])

  totalSent: AdaAmount!
  totalFees: AdaAmount!

  # TODO: bad naming, should be sizeInBytes
  size: Int!

  # Not set in case when Slot is empty
  blockLeader: BootstrapEraStakePool

  blockHeight: Int #TODO: get real number
  blockConfirmations: Int #TODO: get real number

  previousBlock: Block
  nextBlock: Block
  isEmpty: Boolean!

}

type PagedBlocksResult{
  cursor: Int
  hasMore: Boolean!
  # TODO: use pageSize for cost
  blocks: [Block]! @cost(multipliers: [10])
}

type Query {
  pagedBlocks(cursor: Int): PagedBlocksResult!
  pagedBlocksInEpoch(epochNumber: Int!, cursor: Int): PagedBlocksResult!
  block(blockHash: String!): Block
  slot(epoch: Int, slot: Int): Block
}
